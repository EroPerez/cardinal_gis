apply plugin: 'com.android.application'

android {
    compileSdkVersion project.ext.mycompileSdkVersion
    buildToolsVersion project.ext.mybuildToolsVersion

    defaultConfig {
        applicationId project.ext.myApplicationId
        minSdkVersion project.ext.myminSdkVersion
        targetSdkVersion project.ext.mytargetSdkVersion
        versionCode project.ext.myVersionCode
        versionName project.ext.myVersionName
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }
    sourceSets {
        main {
            def nDir = new File(buildDir, 'native-libs')
            project.logger.lifecycle('Native src dir: ' + nDir)
            jniLibs.srcDir nDir
        }
    }
    signingConfigs {
        config {
            Properties props = new Properties()
            def propFile = new File('cardinalpaparazzi.app/ant.properties')
            storeFile file('/media/michel/DATA/Proyectos/New/Cardinal_Captador/geopaparazzi/key.jks')
            storePassword 'Elmaskentona2021'
            keyAlias 'cardus'
            keyPassword 'Elmaskentona2021'
            if (propFile.canRead()) {
                props.load(new FileInputStream(propFile))
                if (props != null && props.containsKey('key.store') && props.containsKey('key.store.password') &&
                        props.containsKey('key.alias') && props.containsKey('key.alias.password')) {
                    storeFile = file(props['key.store'])
                    storePassword = props['key.store.password']
                    keyAlias = props['key.alias']
                    keyPassword = props['key.alias.password']
                } else {
                    println 'cardinalpaparazzi.app/ant.properties found but some entries are missing'
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                println 'cardinalpaparazzi.app/ant.properties not found'
                android.buildTypes.release.signingConfig = null
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.config
            applicationIdSuffix myApplicationId
            versionNameSuffix myVersionName
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFileName = "CardusGIS_" + android.defaultConfig.versionName + ".apk"
                }
            }
        }
        debug {
            applicationIdSuffix myApplicationId
            versionNameSuffix myVersionName
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'GoogleAppIndexingWarning'
    }
    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


task copyNativeLibs(type: Copy) {
    from(new File(project(':geopaparazzi_map').projectDir, 'jniLibs')) {
        include 'arm64-v8a/libjsqlite.so'
        include 'armeabi-v7a/libjsqlite.so'
        include 'x86_64/libjsqlite.so'
    }
    into new File(buildDir, 'native-libs')
}
tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }
clean.dependsOn 'cleanCopyNativeLibs'


dependencies {
    api 'com.android.support:appcompat-v7:28.0.0'

    implementation project(':geopaparazzi_core')
//    implementation project(':geopaparazzi_default_export_plugins')
    implementation project(':geopaparazzi_default_import_plugins')
//    implementation project(':geopaparazzi_pdf_export_plugins')
//    implementation project(':geopaparazzi_profiles_export_plugins')
//    implementation project(':geopaparazzi_profiles_import_plugins')
//    implementation project(':geopaparazzi_projects_export_plugins')
    //implementation project(':geopaparazzi_projects_import_plugins')
    implementation project(':plugins_cardinal_io')
    implementation 'org.greenrobot:greendao:3.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'// add library
//    implementation "androidx.slidingpanelayout:slidingpanelayout:1.2.0-alpha02"
    implementation('com.journeyapps:zxing-android-embedded:4.2.0') { transitive = false }
    implementation 'com.google.zxing:core:3.3.0'
    //Joda Time
    implementation 'net.danlew:android.joda:2.10.6.1'

}
